// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, avoid_types_on_closure_parameters
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../core/object_box/system_box.dart';
import '../../core/object_box/user_box.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1832607669726758391),
      name: 'SystemBox',
      lastPropertyId: const IdUid(9, 7378724197994116009),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2056982427015589345),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5853796225119954933),
            name: 'languageCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2260590782754986478),
            name: 'isDarkTheme',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7378724197994116009),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2675310392805911943),
      name: 'UserBox',
      lastPropertyId: const IdUid(11, 3657546461915435168),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7058375829759731221),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(6, 3123596266014334789),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2915156053489853178),
            name: 'publicKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3740892827534818616),
            name: 'keyTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7530409966869861060),
            name: 'contactTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3657546461915435168),
            name: 'alias',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 690163977439294098),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [690163977439294098],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6564629119384025087,
        7179254798577854811,
        4908270738287603655,
        4445629052936019222,
        3150269498728261426,
        5901341186068661073,
        8715371853184615309,
        6676036173227231775,
        3267880676061340620,
        101103840907168410,
        2377119772991759144,
        5859886160819597423,
        7153832153020998477,
        9083648820170046366,
        8291497389063408322,
        4677623587850214075
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    SystemBox: EntityDefinition<SystemBox>(
        model: _entities[0],
        toOneRelations: (SystemBox object) => [],
        toManyRelations: (SystemBox object) => {},
        getId: (SystemBox object) => object.id,
        setId: (SystemBox object, int id) {
          object.id = id;
        },
        objectToFB: (SystemBox object, fb.Builder fbb) {
          final languageCodeOffset = object.languageCode == null
              ? null
              : fbb.writeString(object.languageCode!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, languageCodeOffset);
          fbb.addBool(2, object.isDarkTheme);
          fbb.addInt64(8, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SystemBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              languageCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isDarkTheme: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)));

          return object;
        }),
    UserBox: EntityDefinition<UserBox>(
        model: _entities[1],
        toOneRelations: (UserBox object) => [],
        toManyRelations: (UserBox object) => {},
        getId: (UserBox object) => object.id,
        setId: (UserBox object, int id) {
          object.id = id;
        },
        objectToFB: (UserBox object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final publicKeyOffset = object.publicKey == null
              ? null
              : fbb.writeString(object.publicKey!);
          final aliasOffset =
              object.alias == null ? null : fbb.writeString(object.alias!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(5, nameOffset);
          fbb.addOffset(6, publicKeyOffset);
          fbb.addInt64(8, object.keyTime?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.contactTime?.millisecondsSinceEpoch);
          fbb.addOffset(10, aliasOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final contactTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = UserBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              alias: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              publicKey: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              contactTime: contactTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(contactTimeValue),
              keyTime: keyTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(keyTimeValue));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [SystemBox] entity fields to define ObjectBox queries.
class SystemBox_ {
  /// see [SystemBox.id]
  static final id = QueryIntegerProperty<SystemBox>(_entities[0].properties[0]);

  /// see [SystemBox.languageCode]
  static final languageCode =
      QueryStringProperty<SystemBox>(_entities[0].properties[1]);

  /// see [SystemBox.isDarkTheme]
  static final isDarkTheme =
      QueryBooleanProperty<SystemBox>(_entities[0].properties[2]);

  /// see [SystemBox.date]
  static final date =
      QueryIntegerProperty<SystemBox>(_entities[0].properties[3]);
}

/// [UserBox] entity fields to define ObjectBox queries.
class UserBox_ {
  /// see [UserBox.id]
  static final id = QueryIntegerProperty<UserBox>(_entities[1].properties[0]);

  /// see [UserBox.name]
  static final name = QueryStringProperty<UserBox>(_entities[1].properties[1]);

  /// see [UserBox.publicKey]
  static final publicKey =
      QueryStringProperty<UserBox>(_entities[1].properties[2]);

  /// see [UserBox.keyTime]
  static final keyTime =
      QueryIntegerProperty<UserBox>(_entities[1].properties[3]);

  /// see [UserBox.contactTime]
  static final contactTime =
      QueryIntegerProperty<UserBox>(_entities[1].properties[4]);

  /// see [UserBox.alias]
  static final alias = QueryStringProperty<UserBox>(_entities[1].properties[5]);
}
